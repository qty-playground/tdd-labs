# TDD Labs - Development Prompts Overview

## 專案開發流程指南

這個專案使用一系列專門的 prompts 來指導不同的開發階段和任務。每個 prompt 都有特定的用途和使用時機。

## Prompts 架構

```
prompts/
├── overview.prompt         # 📋 本檔案 - 整體使用指南
├── coding-style.prompt     # 🎨 Python 編碼風格規範
├── web-api.prompt         # 🌐 FastAPI 模組化架構指南
└── tdd/                   # 🔄 TDD 開發流程
    ├── tdd-session.prompt # 🎯 TDD 主控制器
    ├── red-phase.prompt   # 🔴 Red Phase 專用
    ├── green-phase.prompt # 🟢 Green Phase 專用
    └── refactor-phase.prompt # 🔧 Refactor Phase 專用
```

## 使用流程

### 1. 專案設置
```bash
# 首次設置開發環境
./setup-dev.sh
```

### 2. 開發前準備
閱讀核心指南：
- `@prompts/coding-style.prompt` - 了解編碼風格要求
- `@prompts/web-api.prompt` - 了解 FastAPI 架構原則

### 3. TDD 開發流程

#### 3.1 開始新的 TDD Session
```
使用: @prompts/tdd/tdd-session.prompt
目的: 確定目標模組、測試檔案，判斷當前應該在哪個階段
```

#### 3.2 Red Phase - 寫失敗測試
```
使用: @prompts/tdd/red-phase.prompt
限制: 只能修改 tests/ 目錄下的檔案
目標: 為新的 business rule 寫失敗測試
```

#### 3.3 Green Phase - 最簡實作
```
使用: @prompts/tdd/green-phase.prompt  
限制: 只能修改非 tests/ 的實作檔案
目標: 用最極簡方式讓測試通過 (hardcode OK)
```

#### 3.4 Refactor Phase - 改善品質
```
使用: @prompts/tdd/refactor-phase.prompt
限制: 保持 public interface 不變
目標: 在測試保護下改善程式碼品質
```

#### 3.5 循環或結束
回到 `tdd-session.prompt` 判斷：
- 有新 rule → 進入下一個 Red Phase
- 沒有新 rule → 等待新需求

## 使用範例

### 場景 1: 新功能開發
```markdown
1. @prompts/tdd/tdd-session.prompt
   - 確定目標: user authentication feature
   - 檔案: tdd_labs/services/auth_service.py + tests/

2. @prompts/tdd/red-phase.prompt
   - 寫測試: test_should_authenticate_valid_user()
   - 結果: ImportError (類別不存在)

3. @prompts/tdd/green-phase.prompt  
   - 建立 AuthService 類別
   - hardcode return User("fake@test.com")

4. @prompts/tdd/refactor-phase.prompt
   - 改善命名、提取方法
   - 保持測試通過
```

### 場景 2: API 端點開發
```markdown
1. @prompts/web-api.prompt
   - 建立 router 模組架構
   - 遵循 absolute imports 規則

2. 配合 TDD 流程開發業務邏輯
   - 先寫 API 測試 (Red)
   - 實作 router + service (Green)  
   - 重構改善 (Refactor)
```

## Prompt 選擇指南

### 何時使用哪個 Prompt？

| 情況 | 使用 Prompt | 目的 |
|------|-------------|------|
| 不確定現在該做什麼 | `tdd-session.prompt` | 狀態判斷和流程控制 |
| 需要寫測試 | `red-phase.prompt` | 專注測試撰寫 |
| 需要實作功能 | `green-phase.prompt` | 專注最簡實作 |
| 程式碼需要改善 | `refactor-phase.prompt` | 專注品質改善 |
| 建立 API 結構 | `web-api.prompt` | 架構設計指導 |
| 程式碼風格問題 | `coding-style.prompt` | 命名和結構規範 |

## 重要原則

### 1. 階段純粹性
- 每個 TDD 階段都有明確的檔案修改限制
- 不要在錯誤的階段做錯誤的事情
- 專注於當前階段的唯一目標

### 2. Prompt 協作
- `coding-style.prompt` 的原則貫穿所有階段
- `web-api.prompt` 指導整體架構設計
- TDD prompts 控制開發節奏和品質

### 3. 開發紀律
- 遵循 Red → Green → Refactor 順序
- 每個階段完成後進行檢查確認
- 在測試保護下放心重構

## 故障排除

### 常見問題
1. **不知道在哪個階段**: 使用 `tdd-session.prompt` 重新確認
2. **測試一直不通過**: 確認是否在正確的 phase 做正確的事
3. **程式碼太複雜**: 可能在 Green Phase 過度設計了
4. **重構後測試失敗**: 違反了 interface 保持不變的原則

### 最佳實踐
- 頻繁執行測試套件
- 小步驟進行，頻繁確認
- 遵守 prompt 中的檔案修改限制
- 保持各階段目標的純粹性

---

**記住**: 這些 prompts 是為了讓開發過程更有紀律和效率。當有疑問時，回到對應的 prompt 尋找具體指導。