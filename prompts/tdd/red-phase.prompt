# RED PHASE - Write Failing Tests

## 🔴 RED PHASE ACTIVE

**目標：為新的 business rule 寫一個失敗的測試**

## Strict File Modification Rules

### ✅ ALLOWED - 只能修改這些檔案：
- `tests/` 目錄下的任何 `*_test.py` 檔案
- 新增 test imports 和 test utilities
- 修改 test fixtures 和 test data

### ❌ FORBIDDEN - 絕對不可修改：
- `tdd_labs/` 目錄下的任何實作檔案
- `main.py`, `__init__.py` 等實作相關檔案  
- 任何非測試的程式碼

## Red Phase Objectives - CRITICAL TDD Purity Rules

### 🎯 1. ONE Test, ONE Rule - 絕對原則
**NEVER write multiple tests in one Red Phase**

❌ **WRONG - Multiple tests:**
```python
def test_should_handle_multiples_of_three():
    assert foo_bar_bar(3) == "Foo"
    assert foo_bar_bar(6) == "Foo"  # 這是第二個測試案例！
    assert foo_bar_bar(9) == "Foo"  # 這是第三個測試案例！
```

✅ **CORRECT - Single test case:**
```python  
def test_should_return_foo_when_input_is_3():
    """只測試 input=3 的情況，不偷看未來需求"""
    assert foo_bar_bar(3) == "Foo"
```

### 🚫 2. NO Future Peeking - 當下思維
- **只考慮當下這一個具體需求**
- **不要預測或準備未來的測試案例**
- **即使需求描述包含複數範例，也只挑一個來測試**

❌ **WRONG - Peeking at future:**
```python
# 需求: "數字 3, 6, 9 都應該回傳 Foo"
def test_multiples_of_three():
    assert foo_bar_bar(3) == "Foo"
    assert foo_bar_bar(6) == "Foo"  # 偷看未來！
    assert foo_bar_bar(9) == "Foo"  # 偷看未來！
```

✅ **CORRECT - Present focus:**
```python
# 需求: "數字 3, 6, 9 都應該回傳 Foo" 
# 但我只測試第一個例子
def test_should_return_foo_when_input_is_3():
    assert foo_bar_bar(3) == "Foo"
```

### 📝 3. Minimal Test Structure
```python
def test_should_[具體行為]_when_[具體條件]():
    """具體描述這一個測試要驗證什麼"""
    # 最簡單的測試，只驗證一個條件
    result = target_function(specific_input)
    assert result == expected_output
```

### 3. Expected Failure Types
```python
# Method not implemented yet
with pytest.raises(NotImplementedError):
    service.method_name()

# Class doesn't exist yet  
from tdd_labs.services.new_service import NewService  # ImportError expected

# Validation rule not implemented
with pytest.raises(ValidationError):
    service.validate("invalid_input")

# API endpoint not implemented (using test_client fixture)
def test_should_return_user_profile(test_client):
    response = test_client.get("/profile")
    # Expected: 404 or 501 - endpoint not implemented yet

# Authentication required (using authenticated_client fixture)  
def test_should_require_valid_token(authenticated_client):
    response = authenticated_client.get("/admin/users")
    # Expected: 403 or NotImplementedError - authorization logic not implemented
```

## Red Phase Completion Criteria

### ✅ Phase Complete When:
1. **Test is written** - 新測試已寫完
2. **Test runs and fails** - 執行 `pytest -v` 確認測試被發現且失敗
3. **Test fails correctly** - 測試因為正確的原因失敗（NotImplementedError, ImportError, etc）
4. **Test is focused** - 只測試一個 business rule
5. **Imports are minimal** - 只 import 必要的東西

### 📋 Red Phase Checklist:
- [ ] 測試寫在正確的 `tests/` 目錄下
- [ ] 測試名稱清楚描述 business rule
- [ ] 執行 `pytest -v` 確認測試被發現且會失敗（原因正確）
- [ ] 沒有修改任何實作程式碼
- [ ] 準備好進入 Green Phase

## Transition to Green Phase

Red Phase 完成後，輸出：
```
🔴 → 🟢 RED PHASE COMPLETE
Failed test created: [test_method_name]
Reason for failure: [NotImplementedError/ImportError/etc]
Ready for GREEN PHASE
```

## Test Discovery Guidelines

### 確保測試被 pytest 發現：
```bash
# 檢查測試發現情況
pytest --collect-only

# 檢查特定測試檔案
pytest --collect-only tests/services/user_service_test.py

# 如果測試沒被發現，檢查：
# 1. 檔案名稱是否符合 *_test.py 或 test_*.py
# 2. 函數名稱是否以 test_ 開頭
# 3. 檔案路徑是否在 tests/ 目錄下
# 4. 是否有語法錯誤阻止 import
```

## Common Red Phase Mistakes to Avoid

❌ **Don't**:
- 修改實作程式碼
- 寫多個規則在一個測試裡
- 讓測試意外通過
- 過度複雜的測試設置
- 忘記確認測試被 pytest 發現

✅ **Do**:
- 專注寫一個失敗測試
- 清楚表達 business rule
- 確認失敗原因正確
- 保持測試簡單明確
- 先確認 test discovery 正常