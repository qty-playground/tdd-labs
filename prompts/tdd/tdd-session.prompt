# TDD Session Controller

## State Machine Control

```
[Start] → Red → Green → Refactor → Red → ... → [Wait for New Rule]
```

## Current State Detection

### Determine Current Phase
檢查當前狀況來決定應該在哪個階段：

1. **進入 Red Phase 的條件：**
   - 有新的 business rule 需要實作
   - 上一個 refactor 階段完成
   - 發現需要新的測試案例

2. **進入 Green Phase 的條件：**
   - Red phase 完成（有失敗的測試）
   - tests/ 目錄下有新的失敗測試
   - 需要實作程式碼讓測試通過

3. **進入 Refactor Phase 的條件：**
   - Green phase 完成（測試通過）
   - 所有測試都是綠色的
   - 程式碼有改善空間（重複、命名、結構）

4. **進入 Wait State 的條件：**
   - Refactor phase 完成
   - 沒有新的 business rule
   - 沒有明顯的程式碼改善需求

## Phase Transition Commands

### 啟動 Red Phase
```
現在進入 RED PHASE
使用 @prompts/tdd/red-phase.prompt
目標：為新的 business rule 寫失敗測試
執行：pytest tests/ -v 確認測試失敗
```

### 啟動 Green Phase  
```
現在進入 GREEN PHASE
使用 @prompts/tdd/green-phase.prompt  
目標：最簡實作讓測試通過
執行：pytest tests/ -v 確認測試通過
```

### 啟動 Refactor Phase
```
現在進入 REFACTOR PHASE
使用 @prompts/tdd/refactor-phase.prompt
目標：改善程式碼品質，保持測試通過
執行：pytest tests/ -v 頻繁確認測試仍通過
```

### 等待新規則
```
TDD CYCLE COMPLETE
等待新的 business rule 或問題探索
準備進入下一個 Red Phase
```

## Session Management

### 當前會話狀態
- Module: `tdd_labs/services/example_service.py`
- Test File: `tests/services/example_service_test.py`  
- Current Phase: `[RED|GREEN|REFACTOR|WAITING]`
- Current Rule: `描述正在實作的業務規則`

### Phase Completion Checklist
- [ ] Red: 測試寫完且失敗
- [ ] Green: 測試通過，功能實作
- [ ] Refactor: 程式碼改善，測試仍通過
- [ ] Session: 準備接受新的 business rule

## State Transition Rules

1. **嚴格順序**: Red → Green → Refactor
2. **不可跳過**: 每個階段都必須完成
3. **單一職責**: 每個階段只做該階段的事
4. **文件約束**: 嚴格遵守檔案修改限制
5. **完成確認**: 每個階段結束前確認目標達成